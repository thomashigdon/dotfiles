#if ! [ "$SSH_TTY" ] ; then
#    return
#fi
    
export EDITOR="vim"
set -o vi

function ns {
  local cur_dir="$HOME/tmp/scratch/current"
  local new_dir="$HOME/tmp/scratch/`date +'%s'`"

  mv $cur_dir $new_dir
  mkdir -p $cur_dir
  rm ~/scratch
  ln -s $cur_dir ~/scratch 
  cd ~/scratch
  echo "New scratch dir ready"
}

# autojump
if [[ $OSTYPE =~ ^darwin ]]; then
  [[ -s `brew --prefix`/etc/autojump.sh ]] && . `brew --prefix`/etc/autojump.sh
  export PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin
  alias airport='sudo /System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport'
  alias ls='gls --color=auto -N'
  alias dircolors='gdircolors'
fi

keychain -q $(for x in sonos github home;
              do echo $HOME/.keys/*$x | awk '{print $NF}';
             done)
source $HOME/.keychain/$(hostname)-sh

export LANG=en_US.utf8

if command -v dircolors >/dev/null 2>&1; then
    eval $(dircolors ~/.dircolors)
fi

grep1() { awk -v pattern="${1:?pattern is empty}" 'NR==1 || $0~pattern' "${2:?filename is empty}"; }

if [ -f $HOME/.bashrc-sonos ]; then
    source $HOME/.bashrc-sonos
fi

export JAVA_HOME=/usr/lib/jvm/java-7-oracle

set -o vi
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'

export PATH=$HOME/bin:$PATH:$HOME/.bin:$HOME/scripts
alias xpra="/Applications/Xpra.app/Contents/MacOS/Xpra"
export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_TYPE=en_US.UTF-8


export HISTCONTROL=erasedups
export HISTSIZE=100000
shopt -s histappend

export PROMPT_COMMAND=""
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
stty -ixon

# Enable programmable completion features.
if [ -f /etc/bash_completion ]; then
    source /etc/bash_completion
fi

PS1='${debian_chroot:+($debian_chroot)}\u@\h:\d at \t:\w\n\$ '

function goto_dir()
{
  WHERETO="$1"
  shift
 
  # If we're already there, duh
  if echo "$PWD" | grep "$WHERETO$" &>/dev/null; then
    return 0
  fi
 
  # Locate base directory
  ROOTDIR="$PWD"
  while [ 1 ]; do
    if [ -d "$ROOTDIR/$WHERETO" ]; then
      break
    fi
    if [ "$ROOTDIR" = "/" ]; then
      break
    fi
    ROOTDIR="$(dirname $ROOTDIR)"
  done
 
  if [ ! -d "$ROOTDIR/$WHERETO" ]; then
    echo "Cannot find $WHERETO directory." >&2
    return 1
  fi
 
  # Go to the directory
  pushd "$ROOTDIR/$WHERETO"
}

# Update tmux window titles when command is executed
case ${TERM} in

    screen*)

        # user command to change default pane title on demand
        function title { TMUX_PANE_TITLE="$*"; }

        # function that performs the title update (invoked as PROMPT_COMMAND)
        function update_title { printf "\033]2;%s\033\\" "${1:-$TMUX_PANE_TITLE}"; }

        # default pane title is the name of the current process (i.e. 'bash')
        TMUX_PANE_TITLE=$(ps -o comm $$ | tail -1)

        # Reset title to the default before displaying the command prompt
        PROMPT_COMMAND=${PROMPT_COMMAND:+$PROMPT_COMMAND }'update_title'   

        # Update title before executing a command: set it to the command
        trap 'update_title "$BASH_COMMAND"' DEBUG

        ;;

esac

export WILDFLY_HOME=/usr/local/wildfly/current
export JBOSS_HOME=${WILDFLY_HOME}

export LOCATE_PATH=$HOME/var/lib/mlocate/mlocate.db:$LOCATE_PATH
export DBPATH=$HOME/var/lib/mlocate/mlocate.db
export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_TYPE=en_US.UTF-8

alias tmux="tmux -2"

#. /usr/local/lib/python2.7/dist-packages/powerline/bindings/bash/powerline.sh
